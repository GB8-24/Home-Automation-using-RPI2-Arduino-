---------------------------------------------------------------------------------


/* Uber sensor rules */
/* -------------  Uber Sensor -------------------- */

var Number bark_counter = 0


//rules for bark sensor
rule "Uber bark threshold"
when
Item itm_uber1_bark_mqtt received update
then
if(itm_uber1_bark_alm_enb.state == ON)
{
sendCommand(itm_uber1_bark_alm_sta, ON)
bark_counter = bark_counter + 1
itm_uber1_bark_cnt.postUpdate(bark_counter.toString)
}
end

rule "Uber bark response"
when
Item itm_uber1_bark_alm_sta changed from OFF to ON
then
sendMail("GB23295@gmail.com", "bark detected" , "dog barked!!!")
//playSound("ding.mp3")
postUpdate(itm_uber1_bark_time, new DateTimeType())
end

rule "deactivate bark sensor"
when
Item itm_uber1_bark_alm_enb received update
then
bark_counter = 0
itm_uber1_bark_cnt.postUpdate(bark_counter.toString)
end

rule "Uber Lights"
        
when
                
Item itm_uber1_light_mqtt received update
        
then
                
if(itm_uber1_light_mqtt.state < 350)
                
{
                        
sendCommand(itm_uber1_light_sta, OFF)
}

else
                
{
                         
sendCommand(itm_uber1_light_sta, ON)}

end



/*-----  uber - gas/smoke ---------- */

rule "Uber gas smoke threshold"
        
when
                
Item itm_uber1_gas_mqtt received update
        
then
                
if((itm_uber1_gas_mqtt.state > 220) && (itm_uber1_gas_alm_enb.state == ON))

{
                        
sendCommand(itm_uber1_gas_alm_sta, ON)}

end


rule "Uber gas smoke response"

        when

Item itm_uber1_gas_alm_sta changed from OFF to ON
        
then
		
sendMail("GB23295@gmail.com", "gas / smoke" , "gas or smoke detected")
                //playSound("ding.mp3")
                postUpdate(itm_uber1_gas_time, new DateTimeType())
end

/* --------- uber flame ---------- */
rule "Uber flame threshold"
        when
                Item itm_uber1_flame_mqtt received update
        then
                if((itm_uber1_flame_mqtt.state < 900) && (itm_uber1_flame_alm_enb.state == ON))
                {
                        sendCommand(itm_uber1_flame_alm_sta, ON)
                }
end

rule "Uber flame response"
        when
                Item itm_uber1_flame_alm_sta changed from OFF to ON
        then
                sendMail("ArduinoHomeAutomationOpenHAB@gmail.com", "fire detected" , "fire detected")
                //playSound("ding.mp3")
                postUpdate(itm_uber1_flame_time, new DateTimeType())
end


/* --------- uber bark ---------- */
rule "Uber bark threshold"
        when
                Item itm_uber1_bark_mqtt received update
        then
     
if(itm_uber1_bark_alm_enb.state == ON)
                
{
                        sendCommand(itm_uber1_bark_alm_sta, ON)
                }

end


rule "Uber bark response"

when

Item itm_uber1_bark_alm_sta changed from OFF to ON
        
then
                
sendMail("GB23295@gmail.com", "bark detected" , "dog barked!!!")

//playSound("ding.mp3")
                
postUpdate(itm_uber1_bark_time, new DateTimeType())

end


/* --------- uber pir ---------- */

rule "Uber pir threshold"
        
when

Item itm_uber1_pir_mqtt received update
        
then
                
if(itm_uber1_pir_alm_enb.state == ON)

{

sendCommand(itm_uber1_pir_alm_sta, ON)}

end


rule "Uber pir response"
        
when

Item itm_uber1_pir_alm_sta changed from OFF to ON

then

sendMail("GB23295@gmail.com", "pir detected" , "dog pired!!!")

//playSound("ding.mp3")
                
postUpdate(itm_uber1_pir_time, new DateTimeType())

end



